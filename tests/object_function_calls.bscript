// Test functions for Brane Script ABI compliance with C for struct and enum passing
// Enums with single element large structs as variants
enum SingleLargeStructEnum {
    Variant(LargeStruct),
}

fn pass_single_large_struct_enum(input: SingleLargeStructEnum) -> SingleLargeStructEnum {
    return input;
}

// Enums with multi-element large structs as variants
enum MultiLargeStructEnum {
    Variant1(LargeStruct),
    Variant2(LargeStruct),
}

fn pass_multi_large_struct_enum(input: MultiLargeStructEnum) -> MultiLargeStructEnum {
    return input;
}

// Enums with single element different sized variants
enum SingleMixedEnum {
    Small(SmallStruct),
}

fn pass_single_mixed_enum(input: SingleMixedEnum) -> SingleMixedEnum {
    return input;
}

// Enums with multi-element different sized variants
enum MultiMixedEnum {
    Small(SmallStruct),
    Medium(MediumStruct),
    Large(LargeStruct),
}

fn pass_multi_mixed_enum(input: MultiMixedEnum) -> MultiMixedEnum {
    return input;
}

// Small struct (less than 8 bytes)
struct SmallStruct {
    a: i32,
}

fn pass_small_struct(input: SmallStruct) -> SmallStruct {
    // simple pass-through function
    return input;
}

// Medium struct (16 bytes)
struct MediumStruct {
    a: i32,
    b: f64,
}

fn pass_medium_struct(input: MediumStruct) -> MediumStruct {
    return input;
}

// Large struct (more than 16 bytes)
struct LargeStruct {
    a: i32,
    b: f64,
    c: i64,
    d: i32,
}

fn pass_large_struct(input: LargeStruct) -> LargeStruct {
    return input;
}

// Passing combined structs
fn pass_combined_structs(small: SmallStruct, medium: MediumStruct, large: LargeStruct) -> LargeStruct {
    return large;
}

// Enums without data
enum EmptyEnum {
    Variant1,
    Variant2,
}

fn pass_empty_enum(input: EmptyEnum) -> EmptyEnum {
    return input;
}

// Enums with 32 bits of data
enum Enum32 {
    Variant(i32),
}

fn pass_enum32(input: Enum32) -> Enum32 {
    return input;
}

// Enums with 64 bits of data
enum Enum64 {
    Variant(i64),
}

fn pass_enum64(input: Enum64) -> Enum64 {
    return input;
}

// Enums with large structs as variants
enum LargeStructEnum {
    Variant(LargeStruct),
}

fn pass_large_struct_enum(input: LargeStructEnum) -> LargeStructEnum {
    return input;
}

// Enums with different sized variants
enum MixedEnum {
    Small(SmallStruct),
    Medium(MediumStruct),
    Large(LargeStruct),
}

fn pass_mixed_enum(input: MixedEnum) -> MixedEnum {
    return input;
}
