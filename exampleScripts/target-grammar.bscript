mod test {
    pipe add_parallel(add1: i32, add2: i32) -> (count: f32) // All functions / pipelines must return structs with named values, this is so visual scripting implementations may have labels for output values. Eventually this could be abstracted so that a single type return could be automatically expanded to (value: T)
    [
        // Every pipeline stage has the format of  [<name>] [<Function signature>] [<repeat conditions>] { <body> }
        {
            let value = Shared::new(0i32); 
            if add1 == 0 && add2 == 0 {
                
                continue(stage: end, args: (value: value)); // Go to next pipeline stage right away
                // or
                skip_to(stage: end, args: (value: value)); // like a goto, but can only go forward in the pipeline. Useful for async control flow.
            }

            let t1 = start(pipe: add, args: (value: value, count: add1)); // create a start command for both add pipelines. These don't get executed right away, as a hard rule no communication happens inside of segments, they're pure functions
            let t2 = start(pipe: add, args: (value: value, count: add2));

            continue(args: (value: value), deps: [t1, t2]); // Go to the next pipeline stage after deps have been completed, if t1 or t2 returned a value we could pass them as args and the next stage would be able to access their return values, deps is only required to say "we don't care about the returns, so don't make them args".
        }
        end { // "end" is the stage label
            break(value: count)
        }
    ]

    pipe add(value: Shared<i32>, count: i32)  
    [
        (value: Shared<i32>, ) { // Thread safety of data is handled by the runtime, so pipeline stages are only called when all their requested data is available. Shared<T> is basically a shared reference counted pointer with a mutex inside it, where the mutex is automatically shared or unique locked depending on the needs of the stage (Indicated with a MutRef<T> for a mutable reference and Ref<T> for a const reference, and plain Shared<T> for a non-locked handle)
            value += 1
            let workers = start_foreach(pipe: (value: MutRef<i32>) // start one closure style pipeline for a range of values
                [{
                    value += 1;
                }], (value: value.handle()), 0..count); // 0..N expands to a range iterator, see rust .. operator used in for loops 
            
            break(deps: [workers]);
        }
    ]
}
