# Derived from the mingw pipeline
if(NOT _VCPKG_ZIG_TOOLCHAIN)
    set(_VCPKG_ZIG_TOOLCHAIN 1)

    list(APPEND CMAKE_TRY_COMPILE_PLATFORM_VARIABLES
        VCPKG_CRT_LINKAGE VCPKG_TARGET_ARCHITECTURE 
        VCPKG_C_FLAGS VCPKG_CXX_FLAGS
        VCPKG_C_FLAGS_DEBUG VCPKG_CXX_FLAGS_DEBUG
        VCPKG_C_FLAGS_RELEASE VCPKG_CXX_FLAGS_RELEASE
        VCPKG_LINKER_FLAGS VCPKG_LINKER_FLAGS_RELEASE VCPKG_LINKER_FLAGS_DEBUG
    )

    if(VCPKG_TARGET_ARCHITECTURE STREQUAL "x86")
       set(CMAKE_SYSTEM_PROCESSOR i686 CACHE STRING "")
    elseif(VCPKG_TARGET_ARCHITECTURE STREQUAL "x64")
       set(CMAKE_SYSTEM_PROCESSOR x86_64 CACHE STRING "")
    elseif(VCPKG_TARGET_ARCHITECTURE STREQUAL "arm")
       set(CMAKE_SYSTEM_PROCESSOR armv7 CACHE STRING "")
    elseif(VCPKG_TARGET_ARCHITECTURE STREQUAL "arm64")
       set(CMAKE_SYSTEM_PROCESSOR aarch64 CACHE STRING "")
    endif()

    set(CMAKE_SYSTEM_NAME Windows)

    foreach(lang C CXX)
        set(CMAKE_${lang}_COMPILER_TARGET "${CMAKE_SYSTEM_PROCESSOR}-windows-gnu" CACHE STRING "")
    endforeach()

    # Select Zig as the compiler
    if(WIN32)
        find_program(ZCC 
            NAMES zcc.bat zcc.cmd
            PATHS ${CMAKE_CURRENT_LIST_DIR}
            NO_DEFAULT_PATH
        )
        find_program(ZPP
            NAMES z++.bat z++.cmd
            PATHS ${CMAKE_CURRENT_LIST_DIR}
            NO_DEFAULT_PATH
        )
    else()
        find_program(ZCC 
            NAMES zcc.sh
            PATHS ${CMAKE_CURRENT_LIST_DIR}
            NO_DEFAULT_PATH
        )
        find_program(ZPP
            NAMES z++.sh
            PATHS ${CMAKE_CURRENT_LIST_DIR}
            NO_DEFAULT_PATH
        )
    endif()

if(NOT ZPP)
    message(FATAL_ERROR "Could not find zig wrapper script in ${CMAKE_CURRENT_LIST_DIR}")
endif()
    message("Using ZIG at ${ZPP}")
    set(CMAKE_C_COMPILER "${ZCC}" CACHE STRING "")
    set(CMAKE_CXX_COMPILER "${ZPP}" CACHE STRING "")

    message("curent c compile flags: ${CMAKE_C_FLAGS_INIT}")
    string(APPEND CMAKE_C_FLAGS_INIT "${VCPKG_C_FLAGS}")
    string(APPEND CMAKE_CXX_FLAGS_INIT "${VCPKG_CXX_FLAGS}")
    string(APPEND CMAKE_C_FLAGS_DEBUG_INIT " ${VCPKG_C_FLAGS_DEBUG} -g -gdwarf -Og")
    string(APPEND CMAKE_CXX_FLAGS_DEBUG_INIT " ${VCPKG_CXX_FLAGS_DEBUG} -g -gdwarf -Og")
    string(APPEND CMAKE_C_FLAGS_RELEASE_INIT " ${VCPKG_C_FLAGS_RELEASE} ")
    string(APPEND CMAKE_CXX_FLAGS_RELEASE_INIT " ${VCPKG_CXX_FLAGS_RELEASE} ")

    string(APPEND CMAKE_MODULE_LINKER_FLAGS_INIT " ${VCPKG_LINKER_FLAGS} ")
    string(APPEND CMAKE_SHARED_LINKER_FLAGS_INIT " ${VCPKG_LINKER_FLAGS} ")
    string(APPEND CMAKE_EXE_LINKER_FLAGS_INIT " ${VCPKG_LINKER_FLAGS} ")

    if(VCPKG_CRT_LINKAGE STREQUAL "static")
        string(APPEND CMAKE_MODULE_LINKER_FLAGS_INIT "-static ")
        string(APPEND CMAKE_SHARED_LINKER_FLAGS_INIT "-static ")
        string(APPEND CMAKE_EXE_LINKER_FLAGS_INIT "-static ")
    endif()

    string(APPEND CMAKE_MODULE_LINKER_FLAGS_DEBUG_INIT " ${VCPKG_LINKER_FLAGS_DEBUG}")
    string(APPEND CMAKE_SHARED_LINKER_FLAGS_DEBUG_INIT " ${VCPKG_LINKER_FLAGS_DEBUG}")
    string(APPEND CMAKE_EXE_LINKER_FLAGS_DEBUG_INIT " ${VCPKG_LINKER_FLAGS_DEBUG} ")
    string(APPEND CMAKE_MODULE_LINKER_FLAGS_RELEASE_INIT " ${VCPKG_LINKER_FLAGS_RELEASE} ")
    string(APPEND CMAKE_SHARED_LINKER_FLAGS_RELEASE_INIT " ${VCPKG_LINKER_FLAGS_RELEASE} ")
    string(APPEND CMAKE_EXE_LINKER_FLAGS_RELEASE_INIT " ${VCPKG_LINKER_FLAGS_RELEASE} ")
endif()



